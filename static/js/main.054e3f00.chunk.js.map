{"version":3,"sources":["services/ImagesApi.js","components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Modal/Modal.js","components/App.js","index.js"],"names":["query","page","apiKey","axios","get","then","res","data","hits","Searchbar","state","handleSubmit","evt","preventDefault","props","onSubmit","setState","handleChange","target","value","name","className","this","type","autoComplete","autoFocus","placeholder","onChange","React","Component","ImageGalleryItem","src","srcOriginal","id","alt","getLargeImageURL","data-source","data-id","onClick","dataset","source","ImageGallery","images","onImageClick","map","el","webformatURL","largeImageURL","tags","Button","modalRoot","document","querySelector","Modal","onEscPress","event","code","closeModal","onCloseModal","currentTarget","window","addEventListener","removeEventListener","createPortal","App","isLoading","error","showModal","originalImageURL","fetchImages","imagesApi","prevState","catch","finally","scrollTo","top","documentElement","scrollHeight","behavior","handleSubmitForm","searchQuery","handleClickImage","openModal","prevProps","color","height","width","timeout","length","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.054e3f00.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst fetchImagesWithQuery = (query, page = 1) => {\n  const apiKey = '17935593-e396bfe1aec92e4aa57ec3c04';\n  return axios\n    .get(\n      `https://pixabay.com/api/?q=${query}&page=${page}&key=${apiKey}&image_type=photo&orientation=horizontal&per_page=12`,\n    )\n    .then(res => res.data.hits);\n};\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { fetchImagesWithQuery };","import React from 'react';\n\nexport class Searchbar extends React.Component {\n  state = {\n    query: '',\n  };\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n    this.props.onSubmit(this.state.query);\n    this.setState({ query: '' });\n  };\n\n  handleChange = ({ target: { value, name } }) => {\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    return (\n      <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n\n          <input\n            className=\"SearchForm-input\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n            name=\"query\"\n            value={this.state.query}\n            onChange={this.handleChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function ImageGalleryItem({\n  src,\n  srcOriginal,\n  id,\n  alt,\n  getLargeImageURL,\n}) {\n  const handleClick = evt => getLargeImageURL(evt.target.dataset.source);\n\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        src={src}\n        alt={alt}\n        data-source={srcOriginal}\n        data-id={id}\n        className=\"ImageGalleryItem-image\"\n        onClick={handleClick}\n      />\n    </li>\n  );\n}\n\nImageGalleryItem.propTypes = {\n  src: PropTypes.string.isRequired,\n  srcOriginal: PropTypes.string.isRequired,\n  id: PropTypes.number,\n  alt: PropTypes.string,\n  getLargeImageURL: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ImageGalleryItem } from '../ImageGalleryItem/ImageGalleryItem';\n\nexport function ImageGallery({ images, onImageClick }) {\n  return (\n    <ul className=\"ImageGallery\">\n      {images.map(el => (\n        <ImageGalleryItem\n          key={el.id}\n          src={el.webformatURL}\n          srcOriginal={el.largeImageURL}\n          id={el.id}\n          alt={el.tags}\n          getLargeImageURL={onImageClick}\n        ></ImageGalleryItem>\n      ))}\n    </ul>\n  );\n}\n\nImageGallery.propTypes = {\n  images: PropTypes.array.isRequired,\n  onImageClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Button({ onClick }) {\n  return (\n    <button className=\"Button\" onClick={onClick}>\n      Load more\n    </button>\n  );\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport class Modal extends React.Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.onEscPress);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.onEscPress);\n  }\n  onEscPress = event => {\n    if (event.code === 'Escape') {\n      this.props.closeModal();\n    }\n  };\n\n  onCloseModal = event => {\n    if (event.target === event.currentTarget) {\n      this.props.closeModal();\n    }\n  };\n\n  render() {\n    return createPortal(\n      <div className=\"Overlay\" onClick={this.onCloseModal}>\n        <div className=\"Modal\">\n          <img src={this.props.largeImageURL} alt=\"\" />\n        </div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\n\nModal.propTypes = {\n  largeImageURL: PropTypes.string.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport imagesApi from '../services/ImagesApi';\n\nimport { Searchbar } from './Searchbar/Searchbar';\nimport { ImageGallery } from './ImageGallery/ImageGallery';\nimport { Button } from './Button/Button';\nimport { Modal } from './Modal/Modal';\nimport Loader from 'react-loader-spinner';\n\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nexport class App extends React.Component {\n  state = {\n    images: [],\n    isLoading: false,\n    query: '',\n    page: 1,\n    error: null,\n    showModal: false,\n    originalImageURL: '',\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevQuery = prevState.query;\n    const nextQuery = this.state.query;\n    if (prevQuery !== nextQuery) {\n      this.fetchImages();\n    }\n  }\n\n  fetchImages = () => {\n    const { query, page } = this.state;\n    this.setState({ isLoading: true });\n    imagesApi\n      .fetchImagesWithQuery(query, page)\n      .then(images =>\n        this.setState(prevState => ({\n          images: [...prevState.images, ...images],\n          page: prevState.page + 1,\n        })),\n      )\n      .catch(error => this.setState({ error }))\n      .finally(() => {\n        this.setState({ isLoading: false });\n        window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: 'smooth',\n        });\n      });\n  };\n\n  handleSubmitForm = searchQuery => {\n    this.setState({ images: [], query: searchQuery, page: 1 });\n  };\n\n  handleClickImage = largeImageURL => {\n    this.openModal(largeImageURL);\n  };\n\n  openModal = largeImageURL =>\n    this.setState({ showModal: true, originalImageURL: largeImageURL });\n\n  closeModal = () => this.setState({ showModal: false, originalImageURL: '' });\n\n  render() {\n    const { images, isLoading, showModal, originalImageURL } = this.state;\n    return (\n      <>\n        <Searchbar onSubmit={this.handleSubmitForm} />\n        <ImageGallery images={images} onImageClick={this.handleClickImage} />\n        {showModal && (\n          <Modal\n            largeImageURL={originalImageURL}\n            closeModal={this.closeModal}\n          ></Modal>\n        )}\n        <div className=\"Btnwrap\">\n          {isLoading && (\n            <Loader\n              type=\"ThreeDots\"\n              color=\"#303f9f\"\n              height={50}\n              width={50}\n              timeout={3000}\n            />\n          )}\n          {images.length > 0 && !isLoading && (\n            <Button onClick={this.fetchImages} />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport './index.module.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}